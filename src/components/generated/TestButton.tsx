import React, { PureComponent } from "react";
import { Animated, StyleProp, ViewStyle, GestureResponderEvent, Easing, Platform } from "react-native";
import Svg, { G, Rect, Text, TSpan } from "react-native-svg";
/*
 * ORIGINAL SVG
 * ---------------------------------
 * <svg width="564" height="166" viewBox="0 0 564 166" fill="none" xmlns="http://www.w3.org/2000/svg">
 * <g id="TestButton">
 * <rect id="Rectangle1" x="2" y="2" width="560" height="162" rx="20" fill="#86C058" stroke="black" stroke-width="4" stroke-linejoin="round"/>
 * <text id="Click" fill="black" xml:space="preserve" style="white-space: pre" font-family="Roboto" font-size="48" font-style="italic" font-weight="bold" letter-spacing="0em"><tspan x="183.346" y="94.4972">Click  Me!</tspan></text>
 * <rect id="TestButton svgreactify {&#34;tProps&#34;: {&#34;TestButton_onPress&#34;: &#34;Function&#34;}, &#34;#TestButton&#34;: {&#34;touchableOpacity&#34;: {      &#34;onPress&#34;: &#34;props.TestButton_onPress&#34;    }}}" opacity="0.01" x="2" y="2" width="1" height="1" fill="#C4C4C4"/>
 * </g>
 * </svg>
 *
 * ---------------------------------
 *
 * CONFIGURATION
 * ---------------------------------
 * {
 * 	"tProps": {
 * 		"TestButton_onPress": "Function"
 * 	},
 * 	"#TestButton": {
 * 		"touchableOpacity": {
 * 			"onPress": "props.TestButton_onPress"
 * 		}
 * 	}
 * }
 * ---------------------------------
 *
 *
 *                 uuuuuuuuuuuuuuuuuuuu
 *               u" uuuuuuuuuuuuuuuuuu "u
 *             u" u$$$$$$$$$$$$$$$$$$$$u "u
 *           u" u$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *         u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *       u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *     u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     $ $$$" ... "$...  ...$" ... "$$$  ... "$$$ $
 *     $ $$$u  "$$$$$$$  $$$  $$$$$  $$  $$$  $$$ $
 *     $ $$$$$$uu "$$$$  $$$  $$$$$  $$  """ u$$$ $
 *     $ $$$""$$$  $$$$  $$$u "$$$" u$$  $$$$$$$$ $
 *     $ $$$$....,$$$$$..$$$$$....,$$$$..$$$$$$$$ $
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *       "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *         "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *           "u "$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *             "u "$$$$$$$$$$$$$$$$$$$$" u"
 *               "u """""""""""""""""" u"
 *                 """"""""""""""""""""
 *
 * DO NOT EDIT THIS FILE DIRECTLY!
 *
 * TO EDIT THIS FILE, CREATE A CORRESPONDING .svgreactify FILE.
 */
type tSvgState = {
  "#TestButtonButtonInside": boolean;
  "#TestButtonButtonBoundingBox": {
    x: number;
    y: number;
    width: number;
    height: number;
  };
};

type tButtonProps = {
  "#TestButtonButtonOpacity": number;
  "#TestButtonButtonPressInFunction": Function;
  "#TestButtonButtonPressOutFunction": Function;
  "#TestButtonButtonActive": (callback?: Function) => void;
  "#TestButtonButtonInactive": (callback?: Function) => void;
};

type tProps = {
  style?: StyleProp<ViewStyle>;
  debug?: boolean;
  svgRef?: any;
  TestButton_onPress: Function;
};

class SvgTestButton extends PureComponent<tProps & tButtonProps, tSvgState> {
  constructor(props: any) {
    super(props);

    this.state = {
      "#TestButtonButtonInside": true,
      "#TestButtonButtonBoundingBox": {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
      },
    };
  }

  render() {
    const { svgRef, ...props } = this.props;
    const state = this.state;

    const setState = (nextState: any) => this.setState(nextState);

    return (
      <Svg
        viewBox="0 0 564 166"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
        ref={svgRef}
        style={props.style}
      >
        {Platform.OS === "web" ? (
          <G
            id="TestButton"
            opacity={props.debug ? props["#TestButtonButtonOpacity"] : props["#TestButtonButtonOpacity"]}
            cursor="pointer"
            onMouseDown={() => {
              props["#TestButtonButtonActive"](props["#TestButtonButtonPressInFunction"]);
              setState({ ...state, "#TestButtonButtonInside": true });
            }}
            onMouseUp={() => {
              props["#TestButtonButtonInactive"](
                state["#TestButtonButtonInside"] ? props["#TestButtonButtonPressOutFunction"] : undefined,
              );
            }}
            onResponderMove={(event: GestureResponderEvent) => {
              const { locationX, locationY } = event.nativeEvent;
              const { x, y, width, height } = state["#TestButtonButtonBoundingBox"];
              const inside = locationX > x && locationX < x + width && locationY > y && locationY < y + height;
              if (inside && !state["#TestButtonButtonInside"]) {
                props["#TestButtonButtonActive"]();
              } else if (!inside && state["#TestButtonButtonInside"]) {
                props["#TestButtonButtonInactive"]();
              }
              setState({ ...state, "#TestButtonButtonInside": inside });
            }}
            onLayout={(event: { nativeEvent: { layout: { x: number; y: number; width: number; height: number } } }) => {
              const { x, y, width, height } = event.nativeEvent.layout;
              setState({ ...state, "#TestButtonButtonBoundingBox": { x: x, y: y, width: width, height: height } });
            }}
          >
            <Rect
              id="Rectangle1"
              x={2}
              y={2}
              width={560}
              height={162}
              rx={20}
              fill={props.debug ? "#FF00FF" : "#86C058"}
              stroke={props.debug ? "#00FFFF" : "black"}
              strokeWidth={4}
              strokeLinejoin="round"
              strokeOpacity={props.debug ? 0.5 : 1}
            />
            <Text
              id="Click"
              fill={props.debug ? "#FF00FF" : "black"}
              fontFamily="Roboto"
              fontSize={48}
              fontStyle="italic"
              fontWeight="bold"
              letterSpacing="0em"
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            >
              <TSpan x={183.346} y={94.4972}>
                {"Click  Me!"}
              </TSpan>
            </Text>
            <Rect
              id="TestButton svgreactify {&#34;tProps&#34;: {&#34;TestButton_onPress&#34;: &#34;Function&#34;}, &#34;#TestButton&#34;: {&#34;touchableOpacity&#34;: {      &#34;onPress&#34;: &#34;props.TestButton_onPress&#34;    }}}"
              opacity={0.01}
              x={2}
              y={2}
              width={1}
              height={1}
              fill={props.debug ? "#FF00FF" : "#C4C4C4"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
          </G>
        ) : (
          <G
            id="TestButton"
            opacity={props.debug ? props["#TestButtonButtonOpacity"] : props["#TestButtonButtonOpacity"]}
            onPressIn={() => {
              props["#TestButtonButtonActive"](props["#TestButtonButtonPressInFunction"]);
              setState({ ...state, "#TestButtonButtonInside": true });
            }}
            onPressOut={() => {
              props["#TestButtonButtonInactive"](
                state["#TestButtonButtonInside"] ? props["#TestButtonButtonPressOutFunction"] : undefined,
              );
            }}
            onResponderMove={(event: GestureResponderEvent) => {
              const { locationX, locationY } = event.nativeEvent;
              const { x, y, width, height } = state["#TestButtonButtonBoundingBox"];
              const inside = locationX > x && locationX < x + width && locationY > y && locationY < y + height;
              if (inside && !state["#TestButtonButtonInside"]) {
                props["#TestButtonButtonActive"]();
              } else if (!inside && state["#TestButtonButtonInside"]) {
                props["#TestButtonButtonInactive"]();
              }
              setState({ ...state, "#TestButtonButtonInside": inside });
            }}
            onLayout={(event: { nativeEvent: { layout: { x: number; y: number; width: number; height: number } } }) => {
              const { x, y, width, height } = event.nativeEvent.layout;
              setState({ ...state, "#TestButtonButtonBoundingBox": { x: x, y: y, width: width, height: height } });
            }}
          >
            <Rect
              id="Rectangle1"
              x={2}
              y={2}
              width={560}
              height={162}
              rx={20}
              fill={props.debug ? "#FF00FF" : "#86C058"}
              stroke={props.debug ? "#00FFFF" : "black"}
              strokeWidth={4}
              strokeLinejoin="round"
              strokeOpacity={props.debug ? 0.5 : 1}
            />
            <Text
              id="Click"
              fill={props.debug ? "#FF00FF" : "black"}
              fontFamily="Roboto"
              fontSize={48}
              fontStyle="italic"
              fontWeight="bold"
              letterSpacing="0em"
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            >
              <TSpan x={183.346} y={94.4972}>
                {"Click  Me!"}
              </TSpan>
            </Text>
            <Rect
              id="TestButton svgreactify {&#34;tProps&#34;: {&#34;TestButton_onPress&#34;: &#34;Function&#34;}, &#34;#TestButton&#34;: {&#34;touchableOpacity&#34;: {      &#34;onPress&#34;: &#34;props.TestButton_onPress&#34;    }}}"
              opacity={0.01}
              x={2}
              y={2}
              width={1}
              height={1}
              fill={props.debug ? "#FF00FF" : "#C4C4C4"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
          </G>
        )}
      </Svg>
    );
  }
}

Platform;
/**
 * Animated Svg (class) Component
 */
const AnimTestButton = Animated.createAnimatedComponent(SvgTestButton);

/**
 * Wrapper (functional) Component
 */
const WrappedTestButton: React.FC<tProps & { onAnimationComplete?: () => void }> = (props) => {
  const [state, setState] = React.useState<{ TestButtonButtonAnimVal: Animated.Value }>({
    TestButtonButtonAnimVal: new Animated.Value(1),
  });
  const style = (props.style as unknown) as any;

  const TestButtonActiveAnim = Animated.timing(state.TestButtonButtonAnimVal, {
    toValue: 0.2,
    duration: 75,
    easing: Easing.inOut(Easing.quad),
    useNativeDriver: false,
  });

  const TestButtonInactiveAnim = Animated.timing(state.TestButtonButtonAnimVal, {
    toValue: 1,
    duration: 75,
    easing: Easing.inOut(Easing.quad),
    useNativeDriver: false,
  });

  const TestButtonPressInFunction = () => {};
  const TestButtonPressOutFunction = props.TestButton_onPress;

  const TestButtonButtonActive = (callback?: Function) => {
    TestButtonActiveAnim.start(() => {
      if (callback) {
        callback();
      }
    });
  };

  const TestButtonButtonInactive = (callback?: Function) => {
    if (callback) {
      callback();
    }
    TestButtonInactiveAnim.start();
  };

  const buttonArgs = {
    "#TestButtonButtonOpacity": state.TestButtonButtonAnimVal,
    "#TestButtonButtonPressInFunction": TestButtonPressInFunction,
    "#TestButtonButtonPressOutFunction": TestButtonPressOutFunction,
    "#TestButtonButtonActive": TestButtonButtonActive,
    "#TestButtonButtonInactive": TestButtonButtonInactive,
  };

  return <AnimTestButton svgRef={props.svgRef} style={style} {...props} {...buttonArgs} />;
};

export default WrappedTestButton;
