import React, { PureComponent } from "react";
import { Animated, StyleProp, ViewStyle, GestureResponderEvent, Easing, Platform } from "react-native";
import Svg, { G, Rect, Text, TSpan } from "react-native-svg";
/*
 * ORIGINAL SVG
 * ---------------------------------
 * <svg width="257" height="80" viewBox="0 0 257 80" fill="none" xmlns="http://www.w3.org/2000/svg">
 * <g id="BackButton">
 * <rect id="BackButton_2" width="257" height="80" rx="19" fill="#86C058"/>
 * <text id="Back" fill="black" xml:space="preserve" style="white-space: pre" font-family="Roboto" font-size="48" font-style="italic" font-weight="bold" letter-spacing="0em"><tspan x="76.5938" y="59.4062">Back</tspan></text>
 * <rect id="BackButton svgreactify {&#34;tProps&#34;: {&#34;BackButton_onPress&#34;: &#34;Function&#34;}, &#34;#BackButton&#34;: {&#34;touchableOpacity&#34;: {&#10;      &#34;onPress&#34;: &#34;props.BackButton_onPress&#34;&#10;    }}}" opacity="0.01" width="1" height="1" fill="#C4C4C4"/>
 * </g>
 * </svg>
 *
 * ---------------------------------
 *
 * CONFIGURATION
 * ---------------------------------
 * {
 * 	"tProps": {
 * 		"BackButton_onPress": "Function"
 * 	},
 * 	"#BackButton": {
 * 		"touchableOpacity": {
 * 			"onPress": "props.BackButton_onPress"
 * 		}
 * 	}
 * }
 * ---------------------------------
 *
 *
 *                 uuuuuuuuuuuuuuuuuuuu
 *               u" uuuuuuuuuuuuuuuuuu "u
 *             u" u$$$$$$$$$$$$$$$$$$$$u "u
 *           u" u$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *         u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *       u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *     u" u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$u "u
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     $ $$$" ... "$...  ...$" ... "$$$  ... "$$$ $
 *     $ $$$u  "$$$$$$$  $$$  $$$$$  $$  $$$  $$$ $
 *     $ $$$$$$uu "$$$$  $$$  $$$$$  $$  """ u$$$ $
 *     $ $$$""$$$  $$$$  $$$u "$$$" u$$  $$$$$$$$ $
 *     $ $$$$....,$$$$$..$$$$$....,$$$$..$$$$$$$$ $
 *     $ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $
 *     "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *       "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *         "u "$$$$$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *           "u "$$$$$$$$$$$$$$$$$$$$$$$$" u"
 *             "u "$$$$$$$$$$$$$$$$$$$$" u"
 *               "u """""""""""""""""" u"
 *                 """"""""""""""""""""
 *
 * DO NOT EDIT THIS FILE DIRECTLY!
 *
 * TO EDIT THIS FILE, CREATE A CORRESPONDING .svgreactify FILE.
 */
type tSvgState = {
  "#BackButtonButtonInside": boolean;
  "#BackButtonButtonBoundingBox": {
    x: number;
    y: number;
    width: number;
    height: number;
  };
};

type tButtonProps = {
  "#BackButtonButtonOpacity": number;
  "#BackButtonButtonPressInFunction": Function;
  "#BackButtonButtonPressOutFunction": Function;
  "#BackButtonButtonActive": (callback?: Function) => void;
  "#BackButtonButtonInactive": (callback?: Function) => void;
};

type tProps = {
  style?: StyleProp<ViewStyle>;
  debug?: boolean;
  svgRef?: any;
  BackButton_onPress: Function;
};

class SvgBackButton extends PureComponent<tProps & tButtonProps, tSvgState> {
  constructor(props: any) {
    super(props);

    this.state = {
      "#BackButtonButtonInside": true,
      "#BackButtonButtonBoundingBox": {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
      },
    };
  }

  render() {
    const { svgRef, ...props } = this.props;
    const state = this.state;

    const setState = (nextState: any) => this.setState(nextState);

    return (
      <Svg
        viewBox="0 0 257 80"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="xMidYMid meet"
        ref={svgRef}
        style={props.style}
      >
        {Platform.OS === "web" ? (
          <G
            id="BackButton"
            opacity={props.debug ? props["#BackButtonButtonOpacity"] : props["#BackButtonButtonOpacity"]}
            cursor="pointer"
            onMouseDown={() => {
              props["#BackButtonButtonActive"](props["#BackButtonButtonPressInFunction"]);
              setState({ ...state, "#BackButtonButtonInside": true });
            }}
            onMouseUp={() => {
              props["#BackButtonButtonInactive"](
                state["#BackButtonButtonInside"] ? props["#BackButtonButtonPressOutFunction"] : undefined,
              );
            }}
            onResponderMove={(event: GestureResponderEvent) => {
              const { locationX, locationY } = event.nativeEvent;
              const { x, y, width, height } = state["#BackButtonButtonBoundingBox"];
              const inside = locationX > x && locationX < x + width && locationY > y && locationY < y + height;
              if (inside && !state["#BackButtonButtonInside"]) {
                props["#BackButtonButtonActive"]();
              } else if (!inside && state["#BackButtonButtonInside"]) {
                props["#BackButtonButtonInactive"]();
              }
              setState({ ...state, "#BackButtonButtonInside": inside });
            }}
            onLayout={(event: { nativeEvent: { layout: { x: number; y: number; width: number; height: number } } }) => {
              const { x, y, width, height } = event.nativeEvent.layout;
              setState({ ...state, "#BackButtonButtonBoundingBox": { x: x, y: y, width: width, height: height } });
            }}
          >
            <Rect
              id="BackButton_2"
              width={257}
              height={80}
              rx={19}
              fill={props.debug ? "#FF00FF" : "#86C058"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
            <Text
              id="Back"
              fill={props.debug ? "#FF00FF" : "black"}
              fontFamily="Roboto"
              fontSize={48}
              fontStyle="italic"
              fontWeight="bold"
              letterSpacing="0em"
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            >
              <TSpan x={76.5938} y={59.4062}>
                {"Back"}
              </TSpan>
            </Text>
            <Rect
              id="BackButton svgreactify {&#34;tProps&#34;: {&#34;BackButton_onPress&#34;: &#34;Function&#34;}, &#34;#BackButton&#34;: {&#34;touchableOpacity&#34;: {       &#34;onPress&#34;: &#34;props.BackButton_onPress&#34;     }}}"
              opacity={0.01}
              width={1}
              height={1}
              fill={props.debug ? "#FF00FF" : "#C4C4C4"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
          </G>
        ) : (
          <G
            id="BackButton"
            opacity={props.debug ? props["#BackButtonButtonOpacity"] : props["#BackButtonButtonOpacity"]}
            onPressIn={() => {
              props["#BackButtonButtonActive"](props["#BackButtonButtonPressInFunction"]);
              setState({ ...state, "#BackButtonButtonInside": true });
            }}
            onPressOut={() => {
              props["#BackButtonButtonInactive"](
                state["#BackButtonButtonInside"] ? props["#BackButtonButtonPressOutFunction"] : undefined,
              );
            }}
            onResponderMove={(event: GestureResponderEvent) => {
              const { locationX, locationY } = event.nativeEvent;
              const { x, y, width, height } = state["#BackButtonButtonBoundingBox"];
              const inside = locationX > x && locationX < x + width && locationY > y && locationY < y + height;
              if (inside && !state["#BackButtonButtonInside"]) {
                props["#BackButtonButtonActive"]();
              } else if (!inside && state["#BackButtonButtonInside"]) {
                props["#BackButtonButtonInactive"]();
              }
              setState({ ...state, "#BackButtonButtonInside": inside });
            }}
            onLayout={(event: { nativeEvent: { layout: { x: number; y: number; width: number; height: number } } }) => {
              const { x, y, width, height } = event.nativeEvent.layout;
              setState({ ...state, "#BackButtonButtonBoundingBox": { x: x, y: y, width: width, height: height } });
            }}
          >
            <Rect
              id="BackButton_2"
              width={257}
              height={80}
              rx={19}
              fill={props.debug ? "#FF00FF" : "#86C058"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
            <Text
              id="Back"
              fill={props.debug ? "#FF00FF" : "black"}
              fontFamily="Roboto"
              fontSize={48}
              fontStyle="italic"
              fontWeight="bold"
              letterSpacing="0em"
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            >
              <TSpan x={76.5938} y={59.4062}>
                {"Back"}
              </TSpan>
            </Text>
            <Rect
              id="BackButton svgreactify {&#34;tProps&#34;: {&#34;BackButton_onPress&#34;: &#34;Function&#34;}, &#34;#BackButton&#34;: {&#34;touchableOpacity&#34;: {       &#34;onPress&#34;: &#34;props.BackButton_onPress&#34;     }}}"
              opacity={0.01}
              width={1}
              height={1}
              fill={props.debug ? "#FF00FF" : "#C4C4C4"}
              stroke={props.debug ? "#00FFFF" : "none"}
              strokeOpacity={props.debug ? 0.5 : 1}
            />
          </G>
        )}
      </Svg>
    );
  }
}

Platform;
/**
 * Animated Svg (class) Component
 */
const AnimBackButton = Animated.createAnimatedComponent(SvgBackButton);

/**
 * Wrapper (functional) Component
 */
const WrappedBackButton: React.FC<tProps & { onAnimationComplete?: () => void }> = (props) => {
  const [state, setState] = React.useState<{ BackButtonButtonAnimVal: Animated.Value }>({
    BackButtonButtonAnimVal: new Animated.Value(1),
  });
  const style = (props.style as unknown) as any;

  const BackButtonActiveAnim = Animated.timing(state.BackButtonButtonAnimVal, {
    toValue: 0.2,
    duration: 75,
    easing: Easing.inOut(Easing.quad),
    useNativeDriver: false,
  });

  const BackButtonInactiveAnim = Animated.timing(state.BackButtonButtonAnimVal, {
    toValue: 1,
    duration: 75,
    easing: Easing.inOut(Easing.quad),
    useNativeDriver: false,
  });

  const BackButtonPressInFunction = () => {};
  const BackButtonPressOutFunction = props.BackButton_onPress;

  const BackButtonButtonActive = (callback?: Function) => {
    BackButtonActiveAnim.start(() => {
      if (callback) {
        callback();
      }
    });
  };

  const BackButtonButtonInactive = (callback?: Function) => {
    if (callback) {
      callback();
    }
    BackButtonInactiveAnim.start();
  };

  const buttonArgs = {
    "#BackButtonButtonOpacity": state.BackButtonButtonAnimVal,
    "#BackButtonButtonPressInFunction": BackButtonPressInFunction,
    "#BackButtonButtonPressOutFunction": BackButtonPressOutFunction,
    "#BackButtonButtonActive": BackButtonButtonActive,
    "#BackButtonButtonInactive": BackButtonButtonInactive,
  };

  return <AnimBackButton svgRef={props.svgRef} style={style} {...props} {...buttonArgs} />;
};

export default WrappedBackButton;
